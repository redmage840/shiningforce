'''
astar draft for multiple goals (precompute/save goal dist later)
# takes start coord ([x,y]), list of goals ([[x,y],[x2,y2],...]), grid (copy of app.grid or egrid)
# returns a list of coords ([x,y],[x2,y2],...) the path from start to a goal sqr OR None if no pathi
def astar(start, goals, grid):
    open = [nodify(c) for c in app.coords if dist(c, start) == 1]
    closed = [nodify(start)]
    for n in open: # parent is None for 'first sqr in path' (sqrs adj to starting sqr)
        n.h = 1
        close_goal = reduce(lambda a,b : a if dist(a, [n.x,n.y]) < dist(b, [n.x,n.y]) else b, goals)
        n.g = dist([n.x,n.y], close_goal)
        n.f = n.h + n.g
    while True:
        if open == []:
            return None
        current = reduce(lambda a,b : a if a.f < b.f else b, open)
        open.remove(current)
        closed.append(current)
        if [current.x, current.y] in goals:
            return pathify(node)
        adj = [nodify(c) for c in app.coords if dist(c,[current.x,current.y]) == 1]
        for n in adj:
            if grid[n.x][n.y] != '' or n in closed:
                continue
            elif n.h > current.h + 1:
                n.h = current.h + 1
                n.parent = current
                close_goal = reduce(lambda a,b : a if dist(a, [n.x,n.y]) < dist(b, [n.x,n.y]) else b, goals)
                n.g = dist([n.x,n.y], close_goal)
                n.f = n.g + n.h
            elif n not in open:
                n.h = current.h + 1
                n.parent = current
                close_goal = reduce(lambda a,b : a if dist(a, [n.x,n.y]) < dist(b, [n.x,n.y]) else b, goals)
                n.g = dist([n.x,n.y], close_goal)
                n.f = n.g + n.h
                open.append(n)
                
def nodify(coord):
    return Node(coord)
    
class Node():
    def __init__(self, coord):
        self.x = coord[0]
        self.y = coord[1]
        self.parent = None
        self.g = 0
        self.h = 0
        self.f = 0
        
def pathify(node):
    path = [[node.x,node.y]]
    while node.parent != None:
        node = node.parent
        path.append([node.x,node.y])
    return path[::-1]
'''
# astar needs to convert coords to nodes, choose f-vals among multiple goals...

# precompute distance between each point for each map...?

# multiple 'layers' of pathfinding starting with dist to each other, 
